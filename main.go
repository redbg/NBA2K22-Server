package main

import (
	"bytes"
	"encoding/binary"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"
)

var LogsFileName string = "NBA2K22.log"
var UsersFileName string = "NBA2K22.json"
var Password string = "fsjs"

var Users = make(map[string]int64)
var SteamUsers = make(map[string]string)

func main() {
	for {
		var p string
		fmt.Scanln(&p)

		if p == Password+"." {
			break
		}
	}

	fmt.Println("\033[2J\033[1;1H")

	// =========================================

	// 加载用户数据
	LoadUsers()
	// 定期保存用户数据
	go SaveUsersGoroutine()

	// =========================================

	f, err := os.OpenFile(LogsFileName, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)
	if err != nil {
		log.Fatalf("error opening file: %v", err)
	}
	defer f.Close()
	log.SetFlags(0)
	log.SetOutput(&logWriter{Output: f})

	// =========================================
	http.HandleFunc("/2k22/admin", NBA2K22_Admin_Handler)
	http.HandleFunc("/2k22/v1/login", NBA2K22_Login_Handler)
	http.HandleFunc("/2k22/v1/vc", NBA2K22_VC_Handler)
	http.HandleFunc("/2k22/v1/sell", NBA2K22_Sell_Handler)

	// http.ListenAndServe("127.0.0.1:8888", nil)
	http.ListenAndServe(":80", nil)
}

// ====================================================================================================

func LoadUsers() {
	data, err := ioutil.ReadFile(UsersFileName)
	if err == nil {
		json.Unmarshal(data, &Users)
	}
}

func SaveUsers() {
	buf, _ := json.MarshalIndent(Users, "", "\t")
	ioutil.WriteFile(UsersFileName, buf, 0666)
}

func SaveUsersGoroutine() {
	for range time.Tick(600 * time.Second) {
		SaveUsers()
	}
}

// ====================================================================================================

func NBA2K22_Admin_Handler(w http.ResponseWriter, r *http.Request) {
	q := r.URL.Query()
	var m = q.Get("m") // 功能
	var k = q.Get("k") // 卡密
	var v = q.Get("v") // 数值
	var p = q.Get("p") // 管理员密码
	p2, err := r.Cookie("p")

	if p == Password || (err == nil && p2 != nil && p2.Value == Password) {

		// Set-Cookie
		if p == Password {
			cookie := http.Cookie{Name: "p", Value: p}
			w.Header().Add("Set-Cookie", cookie.String())
		}

		// 功能
		if m == "" || m == "Users" {
			buf, _ := json.MarshalIndent(Users, "", "\t")
			fmt.Fprint(w, string(buf))
		} else if m == "SteamUsers" {
			buf, _ := json.MarshalIndent(SteamUsers, "", "\t")
			fmt.Fprint(w, string(buf))
		} else if value, err := strconv.ParseInt(v, 10, 64); m == "Add" && k != "" && err == nil {
			var oldPoint = Users[k]
			Users[k] += value
			if Users[k] < 0 {
				Users[k] = 0
			}
			log.Printf("%s | %v | Point %d -> %d", r.RemoteAddr, r.URL, oldPoint, Users[k])
			fmt.Fprintf(w, "充值成功 Point %d -> %d", oldPoint, Users[k])
		} else if oldPoint, ok := Users[k]; m == "Del" && ok {
			delete(Users, k)
			log.Printf("%s | %v | Point %d -> %d", r.RemoteAddr, r.URL, oldPoint, Users[k])
			fmt.Fprintf(w, "删除成功 Point %d -> %d", oldPoint, Users[k])
		} else if m == "Log" {
			data, err := ioutil.ReadFile(LogsFileName)
			if err != nil {
				w.Write([]byte(err.Error()))
				return
			}
			w.Write(data)
		} else {
			w.WriteHeader(404)
			fmt.Fprint(w, "404 page not found")
		}

		// 保存用户配置
		SaveUsers()
	} else {
		w.WriteHeader(404)
		fmt.Fprint(w, "404 page not found")
	}
}

// ====================================================================================================

func NewRequest(method, url string, body io.Reader) (*http.Request, error) {
	req, err := http.NewRequest(method, url, body)
	req.Header.Add("Connection", "Keep-Alive")
	req.Header.Add("Content-Type", "application/octet-stream")
	req.Header.Add("Accept-Encoding", "gzip, deflate")
	req.Header.Add("User-Agent", "VISUAL_CONCEPTS_WIN64/22.0")
	req.Header.Add("Vc-Request-Id", "23")
	req.Header["VCFIELDLIST_SIZE"] = []string{strconv.FormatInt(req.ContentLength, 10)}
	return req, err
}

// ====================================================================================================

func NBA2K22_Login_Handler(w http.ResponseWriter, r *http.Request) {
	var q = r.URL.Query()
	var k = q.Get("k")
	var x = q.Get("x")
	var SteamUser = q.Get("SteamUser")

	if point, ok := Users[k]; ok {
		w.Header().Add("Point", strconv.FormatInt(point, 10))

		if point > 0 {
			// Save SteamUser
			if SteamUsers[SteamUser] != x {
				SteamUsers[SteamUser] = x
				log.Printf("%s | %v | Point %d", r.RemoteAddr, r.URL, point)
			}

			fmt.Fprintf(w, "Login Successful | Point %d", point)
		} else {
			fmt.Fprintf(w, "Points are used up, please recharge")
		}
	} else {
		fmt.Fprintf(w, "Invalid key")
	}
}

// ====================================================================================================

func NBA2K22_Sell_Handler(w http.ResponseWriter, r *http.Request) {
	var q = r.URL.Query()
	var k = q.Get("k") // 卡密
	var x = q.Get("x")
	var SteamUser = q.Get("SteamUser")
	var sell = q.Get("sell")

	sell = fmt.Sprintf("{\"sell\":[%s]}", sell)

	if point, ok := Users[k]; ok {
		w.Header().Add("Point", strconv.FormatInt(point, 10))
		if point > 0 {
			// 拷贝一份数据
			sell_data_copy := make([]byte, len(sell_data))
			copy(sell_data_copy, sell_data)

			// set sellString len
			buf := bytes.NewBuffer(nil)
			binary.Write(buf, binary.BigEndian, int64(len(sell)+1))
			copy(sell_data_copy[8:], buf.Bytes())

			sell_data_copy = append(sell_data_copy, []byte(sell)...)
			sell_data_copy = append(sell_data_copy, 0x00)

			// 字节对齐
			t := len(sell_data_copy) % 16
			if t > 0 {
				sell_data_copy = append(sell_data_copy, bytes.Repeat([]byte{0x00}, 16-t)...)
			}

			// 发送请求
			url := fmt.Sprintf("https://nba2k22-svc.2ksports.com:22140/nba/2k22/MyTeamV7/user_card_bulk_actions?x=%s", x)
			req, _ := NewRequest("POST", url, bytes.NewReader(sell_data_copy))
			resp, err := http.DefaultClient.Do(req)

			if err != nil {
				fmt.Fprintf(w, "Error")
				return
			}

			if resp.ContentLength > 100 {
				// 扣点
				Users[k] -= 1
				// Save SteamUser
				SteamUsers[SteamUser] = x

				log.Printf("%s | %v | Point %d -> %d", r.RemoteAddr, r.URL, point, Users[k])
				fmt.Fprintf(w, "Sell Success | Point:%d -> %d", point, Users[k])
			} else {
				fmt.Fprintf(w, "Sell Failure")
			}
		} else {
			fmt.Fprintf(w, "Points are used up, please recharge")
		}
	} else {
		fmt.Fprintf(w, "Invalid key")
	}
}

var sell_data = []byte{
	0x5d, 0x92, 0xc8, 0xf1, 0x6e, 0x46, 0x75, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // sellString len + 1
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
}

// ====================================================================================================

func NBA2K22_VC_Handler(w http.ResponseWriter, r *http.Request) {
	var q = r.URL.Query()
	var k = q.Get("k") // 卡密
	var x = q.Get("x")
	var SteamUser = q.Get("SteamUser")
	var c = q.Get("c") // 存档Id

	if point, ok := Users[k]; ok {
		w.Header().Add("Point", strconv.FormatInt(point, 10))
		if point > 0 {
			// 拷贝一份数据
			vc_data_16251_copy := make([]byte, len(vc_data_16251))
			copy(vc_data_16251_copy, vc_data_16251)

			// 取存档Id,修改数据中的存档Id
			c, _ := strconv.ParseInt(c, 10, 64)
			buf := bytes.NewBuffer(nil)
			binary.Write(buf, binary.BigEndian, c)
			copy(vc_data_16251_copy[1240:], buf.Bytes())

			// 发送请求
			url := fmt.Sprintf("https://nba2k22-svc.2ksports.com:22120/nba/2k22/VirtualCurrencyV4/earn?x=%s", x)
			req, _ := NewRequest("POST", url, bytes.NewReader(vc_data_16251_copy))
			resp, err := http.DefaultClient.Do(req)

			if err != nil {
				fmt.Fprintf(w, "Error")
				return
			}

			if resp.StatusCode == 500 {
				// 获取VC成功,扣点
				Users[k] -= 1

				// Save SteamUser
				if SteamUsers[SteamUser] != x {
					SteamUsers[SteamUser] = x
					log.Printf("%s | %v | Point %d -> %d", r.RemoteAddr, r.URL, point, Users[k])
				}
			}

			// 返回结果
			// w.WriteHeader(resp.StatusCode)
			fmt.Fprintf(w, "code:%d | Point %d -> %d", resp.StatusCode, point, Users[k])
		} else {
			fmt.Fprintf(w, "Points are used up, please recharge")
		}
	} else {
		fmt.Fprintf(w, "Invalid key")
	}
}

var vc_data_16251 = []byte{
	0x07, 0xc8, 0xd1, 0xd8, 0x14, 0x23, 0xad, 0xd2, 0x92, 0x96, 0xae, 0x90, 0xf4, 0x7f, 0x00, 0x00,
	0x08, 0x01, 0xf6, 0x75, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d,
	0x08, 0xe7, 0x44, 0x23, 0x14, 0x23, 0xad, 0xd2, 0x6b, 0x45, 0xf0, 0xe9, 0xdb, 0x20, 0x00, 0x59,
	0x0f, 0x6c, 0x32, 0x6c, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d,
	0x0f, 0x8a, 0x80, 0x3a, 0x14, 0x23, 0xad, 0xd2, 0xfa, 0x80, 0xba, 0x73, 0x00, 0x00, 0x00, 0x00,
	0x12, 0x17, 0x36, 0xa5, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x13, 0x85, 0x1b, 0x03, 0x14, 0x23, 0xad, 0xd2, 0x97, 0xec, 0x5a, 0xe5, 0xd0, 0x20, 0x00, 0x59,
	0x13, 0xcb, 0xdc, 0xd1, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39,
	0x13, 0xd7, 0x10, 0x7a, 0xb7, 0xea, 0x1c, 0xd0, 0x3f, 0x80, 0x00, 0x00, 0xd5, 0x00, 0x00, 0x59,
	0x14, 0xe8, 0xdf, 0x1a, 0x14, 0x23, 0xad, 0xd2, 0x76, 0x27, 0xad, 0x24, 0xf4, 0x7f, 0x00, 0x00,
	0x1a, 0x61, 0x5c, 0x51, 0xb7, 0xea, 0x1c, 0xd0, 0x3f, 0x80, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x07,
	0x1a, 0x7d, 0x90, 0xfa, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39,
	0x20, 0x58, 0x22, 0x9e, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0x21, 0xe9, 0x20, 0x97, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0,
	0x22, 0xd4, 0xa6, 0xac, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0,
	0x23, 0x7c, 0xc4, 0x13, 0x14, 0x23, 0xad, 0xd2, 0x5c, 0x7a, 0xb6, 0x12, 0xd0, 0x20, 0x00, 0x59,
	0x24, 0x11, 0x00, 0x0a, 0x14, 0x23, 0xad, 0xd2, 0x20, 0xbe, 0x9d, 0x03, 0x64, 0x00, 0x00, 0x02,
	0x25, 0xb9, 0x62, 0xb5, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0d,
	0x26, 0x84, 0xe4, 0x8e, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0,
	0x27, 0x35, 0xe6, 0x87, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0x2b, 0x62, 0xea, 0x87, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0,
	0x35, 0x04, 0xfe, 0x3d, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0x38, 0x6a, 0xb0, 0xe5, 0x14, 0x23, 0xad, 0xd2, 0x79, 0x87, 0x63, 0x2c, 0x00, 0x00, 0x00, 0x08,
	0x39, 0x6f, 0x64, 0x56, 0xb7, 0xea, 0x1c, 0xd0, 0x3f, 0x80, 0x00, 0x00, 0xd0, 0x20, 0x00, 0x59,
	0x3e, 0x02, 0xa0, 0x4f, 0xb7, 0xea, 0x1c, 0xd0, 0x3f, 0x80, 0x00, 0x00, 0x74, 0x68, 0x00, 0x01,
	0x3f, 0x07, 0x74, 0xfc, 0x14, 0x23, 0xad, 0xd2, 0x28, 0x6c, 0xf8, 0xe7, 0xd5, 0x00, 0x00, 0x59,
	0x42, 0x03, 0xce, 0xab, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0x48, 0x00, 0x44, 0x6a, 0x14, 0x23, 0xad, 0xd2, 0xee, 0x83, 0x67, 0x42, 0xdb, 0x20, 0x00, 0x59,
	0x49, 0x05, 0x90, 0xd9, 0xb7, 0xea, 0x1c, 0xd0, 0x3f, 0x80, 0x00, 0x00, 0xf4, 0x7f, 0x00, 0x00,
	0x4e, 0x68, 0x54, 0xc0, 0xb7, 0xea, 0x1c, 0xd0, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x4f, 0x6d, 0x80, 0x73, 0x14, 0x23, 0xad, 0xd2, 0x37, 0x5d, 0x2a, 0x82, 0x00, 0x00, 0x00, 0x08,
	0x50, 0x32, 0xd6, 0x11, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0x51, 0x83, 0xd4, 0x18, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0,
	0x52, 0xbe, 0x52, 0x23, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02,
	0x53, 0x16, 0x30, 0x9c, 0x14, 0x23, 0xad, 0xd2, 0x28, 0x6c, 0xf8, 0xe7, 0xd5, 0x00, 0x00, 0x59,
	0x54, 0x7b, 0xf4, 0x85, 0x14, 0x23, 0xad, 0xd2, 0x79, 0x87, 0x63, 0x2c, 0xf4, 0x7f, 0x00, 0x00,
	0x55, 0xd3, 0x96, 0x3a, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0,
	0x56, 0xee, 0x10, 0x01, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0,
	0x57, 0x5f, 0x12, 0x08, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0x5c, 0x65, 0xda, 0x11, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0,
	0x63, 0xef, 0xef, 0x8c, 0x14, 0x23, 0xad, 0xd2, 0xfa, 0x80, 0xba, 0x73, 0xd0, 0x20, 0x00, 0x59,
	0x64, 0x45, 0x33, 0xa6, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x64, 0x82, 0x2b, 0x95, 0x14, 0x23, 0xad, 0xd2, 0x6b, 0x45, 0xf0, 0xe9, 0xd5, 0x00, 0x00, 0x59,
	0x64, 0xcc, 0xec, 0x47, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39,
	0x64, 0xd0, 0x20, 0xec, 0xb7, 0xea, 0x1c, 0xd0, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
	0x6d, 0x66, 0x6c, 0xc7, 0xb7, 0xea, 0x1c, 0xd0, 0x3f, 0x80, 0x00, 0x00, 0xdb, 0x20, 0x00, 0x59,
	0x6d, 0x7a, 0xa0, 0x6c, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d,
	0x78, 0x6b, 0x02, 0xfa, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d,
	0x78, 0x8d, 0xb0, 0xac, 0x14, 0x23, 0xad, 0xd2, 0xb9, 0xbc, 0x73, 0x43, 0x00, 0x00, 0x00, 0x08,
	0x7a, 0x0b, 0xb6, 0x7c, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x7f, 0x06, 0xc6, 0xe3, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d,
	0x7f, 0xe0, 0x74, 0xb5, 0x14, 0x23, 0xad, 0xd2, 0x30, 0xff, 0x65, 0x8c, 0xf4, 0x7f, 0x00, 0x00,
	0x8a, 0x8c, 0x4a, 0xb9, 0x14, 0x23, 0xad, 0xd2, 0x1a, 0x45, 0xdb, 0x06, 0x00, 0x00, 0x00, 0x00,
	0x8a, 0xc2, 0x8d, 0x6b, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39,
	0x8a, 0xde, 0x41, 0xc0, 0xb7, 0xea, 0x1c, 0xd0, 0x3f, 0x80, 0x00, 0x00, 0xd0, 0x20, 0x00, 0x59,
	0x8d, 0xaf, 0x49, 0x72, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39,
	0x8d, 0xb3, 0x85, 0xd9, 0xb7, 0xea, 0x1c, 0xd0, 0x3f, 0x80, 0x00, 0x00, 0xd5, 0x00, 0x00, 0x59,
	0x96, 0x65, 0x63, 0xd6, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d,
	0x96, 0x83, 0xd1, 0x80, 0x14, 0x23, 0xad, 0xd2, 0x97, 0xec, 0x5a, 0xe5, 0xdb, 0x20, 0x00, 0x59,
	0x9f, 0x35, 0x9d, 0xab, 0x14, 0x23, 0xad, 0xd2, 0x76, 0x27, 0xad, 0x24, 0xf4, 0x7f, 0x00, 0x00,
	0xa0, 0x66, 0x35, 0xec, 0xb7, 0xea, 0x1c, 0xd0, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xa6, 0x0e, 0x25, 0x46, 0x14, 0x23, 0xad, 0xd2, 0x5c, 0x7a, 0xb6, 0x12, 0x00, 0x00, 0x00, 0x08,
	0xab, 0x60, 0x6b, 0x9e, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0xac, 0x0d, 0xaf, 0x87, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0xb0, 0xe7, 0x3f, 0x0f, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0xb1, 0x89, 0x66, 0xa1, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf4,
	0xb3, 0xc3, 0xd9, 0x82, 0x14, 0x23, 0xad, 0xd2, 0x20, 0xbe, 0x9d, 0x03, 0xdb, 0x20, 0x00, 0x59,
	0xb8, 0xe0, 0x71, 0x2d, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0,
	0xb9, 0x51, 0x73, 0x24, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0xba, 0x06, 0x81, 0xdc, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xba, 0x75, 0x95, 0xa9, 0x14, 0x23, 0xad, 0xd2, 0x80, 0xb9, 0x6b, 0x53, 0xd0, 0x20, 0x00, 0x59,
	0xbb, 0xdd, 0xf7, 0x16, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0,
	0xbc, 0xb0, 0x33, 0x0f, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0,
	0xbd, 0x18, 0x51, 0xb0, 0x14, 0x23, 0xad, 0xd2, 0xf6, 0x94, 0xef, 0xa0, 0xd5, 0x00, 0x00, 0x59,
	0xc4, 0x88, 0x6a, 0xbd, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
	0xc4, 0xc4, 0xe9, 0x14, 0x14, 0x23, 0xad, 0xd2, 0x37, 0x5d, 0x2a, 0x82, 0xdb, 0x20, 0x00, 0x59,
	0xc7, 0xe0, 0x0f, 0x99, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0xc9, 0x03, 0x82, 0x06, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // CloudSaveId
	0xca, 0x1f, 0x61, 0x26, 0x14, 0x23, 0xad, 0xd2, 0xe8, 0x2d, 0xd1, 0xd9, 0x00, 0x00, 0x00, 0x08,
	0xcb, 0xb7, 0x03, 0x99, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0,
	0xcc, 0xda, 0xc7, 0x80, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0,
	0xcd, 0x01, 0xb1, 0x4a, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xcd, 0x72, 0xa5, 0x3f, 0x14, 0x23, 0xad, 0xd2, 0xee, 0x83, 0x67, 0x42, 0xf4, 0x7f, 0x00, 0x00,
	0xce, 0x56, 0x43, 0xb2, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0xcf, 0xe7, 0x41, 0xbb, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0,
	0xd1, 0x09, 0x15, 0xd0, 0x14, 0x23, 0xad, 0xd2, 0x80, 0xb9, 0x6b, 0x53, 0xf4, 0x7f, 0x00, 0x00,
	0xd7, 0x61, 0x05, 0x7a, 0xb7, 0xea, 0x1c, 0xd0, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xdb, 0x0a, 0x9f, 0x11, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0xdc, 0x67, 0x5b, 0x08, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0xe1, 0x62, 0x53, 0x40, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d,
	0xe1, 0x84, 0xe1, 0x16, 0x14, 0x23, 0xad, 0xd2, 0x1a, 0x45, 0xdb, 0x06, 0x7b, 0x22, 0x00, 0x59,
	0xe8, 0x32, 0xad, 0x3d, 0x14, 0x23, 0xad, 0xd2, 0x30, 0xff, 0x65, 0x8c, 0xf4, 0x7f, 0x00, 0x04,
	0xf1, 0xc6, 0x1e, 0xd7, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf4,
	0xfa, 0xa8, 0x79, 0xe4, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39,
	0xfa, 0xb4, 0xb5, 0x4f, 0xb7, 0xea, 0x1c, 0xd0, 0x3f, 0x80, 0x00, 0x00, 0x2e, 0x63, 0x6f, 0x6d,
	0xfc, 0xa5, 0xf7, 0xd2, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xfd, 0x8b, 0x7a, 0x2f, 0x14, 0x23, 0xad, 0xd2, 0xb9, 0xbc, 0x73, 0x43, 0x65, 0x63, 0x72, 0x65,
	0xfd, 0xc5, 0xbd, 0xfd, 0x3d, 0x9e, 0x50, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39,
	0xfd, 0xd9, 0x71, 0x56, 0xb7, 0xea, 0x1c, 0xd0, 0x3f, 0x80, 0x00, 0x00, 0x83, 0x02, 0x00, 0x59,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
}

type logWriter struct {
	Output io.Writer
}

func (writer *logWriter) Write(bytes []byte) (int, error) {
	s := time.Now().In(time.FixedZone("CST", 8*3600)).Format("2006-01-02 15:04:05 | ") + string(bytes)
	writer.Output.Write([]byte(s))
	return fmt.Print(s)
}
